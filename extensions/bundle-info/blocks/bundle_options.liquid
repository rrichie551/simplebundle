{% style %}
  .bundle-infinite-div{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .bundle-infinite-div select{
    box-sizing: border-box;
    width: 100%;
    padding: 8px;
    font-size: 16px;
    border-radius: 0px;
    border: 1px solid #333;
    margin-bottom: 8px;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url('https://cdn.shopify.com/s/files/1/0641/6033/3877/files/drop.svg?v=1725863438');
    background-repeat: no-repeat;
    background-position: right 8px center;
    font-family: inherit;
    font-weight: normal;
    color: #000;
  }
  #optionsBundle .bundle-infinite-div:not(:last-child){
   margin-bottom: 10px;
  }
  .bundle-infinite-div label{
    margin-bottom: 5px;
    font-weight: bold;
  }
{% endstyle %}

<script>
  function OptionsBundle() {
    const base = '{{ shop.url }}'
      const baseUrl = `${base}/apps/proxyTest`
        fetch(baseUrl,{
          method:'GET',
          redirect: 'manual',
          headers:{
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
          }
          }).then(res => res.json()).then(x =>{
            const result = x.message.bundles;
            result.forEach(bundle => {
        const bundleProductId = bundle.ProductBundleId.replace('gid://shopify/Product/', '');
        if ('{{ product.id }}' === bundleProductId && bundle.bundleType === "infinite") {
          
            const products = bundle.products;
            let html = '';
            products.forEach(product =>{
             
              if (product.name) {
                html += `
                  <div class="bundle-infinite-div">
                    <label for="product-${product.id}">${product.name}</label>
                    <select data-key=${product.products[0].id.replace("gid://shopify/ProductVariant/", "")} id="product-${product.id}" name="product-${product.id}">
                      ${product.products.map(product => `
                        <option value="${product.id}">${product.title}</option>
                      `).join('')}
                    </select>
                  </div>
                `;
              } else if (product.product) {
                html += `
                    <variant-infinite-select-options data-key=${product.product.id.replace("gid://shopify/Product/", "")} data-handle="${product.product.handle}">
                      ${product.product.options.map((option, optionIndex) => `
                        <div class="bundle-infinite-div">
                          <label for="option-${product.id}-${option.id}">${option.name}</label>
                            <select id="option-${product.id}-${option.id}" name="option-${product.id}-${option.id}">
                              ${option.values.map(value => `
                                <option value="${value}" ${value === option.selectedValue ? 'selected' : ''}>${value}</option>
                              `).join('')}
                            </select>
                        </div>
                      `).join('')}
                    </variant-infinite-select-options>
                  `;
              }

            })
            const bundleOptions = document.createElement('div');
            bundleOptions.id = 'optionsBundle';
            bundleOptions.className = 'options-bundle-products';
            bundleOptions.innerHTML = html;
            const firstForm = document.querySelector('form[action="/cart/add');
            if (firstForm) {
              firstForm.appendChild(bundleOptions);
            } else {
              console.warn('No form found on the page to append bundlerAppProducts');
            }
            const productSelectPromises = products.map(product => {
                  if (product.name) {
                    return Promise.resolve({
                      id: product.products[0].id,
                      quantity: 1,
                      data: product.products[0].id.replace("gid://shopify/ProductVariant/", "")
                    });
                  } else {
                    return fetch(window.Shopify.routes.root + `products/${product.product.handle}.js`)
                      .then(response => response.json())
                      .then(prod => {
                        console.log("These are the variants", prod);
                        function getSelectedOptions() {
                          const options = Array.from(document.querySelector('variant-infinite-select-options').querySelectorAll('select'), (select) => select.value);
                          return options;
                        }
                        function getSelectedVariant(options) {
                          const variant = prod.variants.find((variant) => {
                            const findings = !variant.options.map((option, index) => {
                              return options[index] === option;
                            }).includes(false);

                            if (findings) return variant;
                          });

                          console.log(variant);
                          return variant;
                        }

                          const selectedOptions = getSelectedOptions();
                          const selectedVariant = getSelectedVariant(selectedOptions);
                          return {
                            id: `gid://shopify/ProductVariant/${selectedVariant.id}`,
                            quantity: 1,
                            data: product.product.id.replace("gid://shopify/Product/", "")
                          };
                        });
                    }
                  });

              Promise.all(productSelectPromises)
                .then(productSelects => {
                  console.log(productSelects);
                  document.querySelectorAll('form').forEach(form => {
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'properties[_bundleId]';
                    hiddenInput.value = JSON.stringify(productSelects);
                    hiddenInput.className = 'bundle-hidden-input';
                    form.appendChild(hiddenInput);
                  });
                }).then(()=>{
                 
            const bundlerAppProducts = document.getElementById('optionsBundle');
            const allSelects = bundlerAppProducts.querySelectorAll('select');
            
            function updateHiddenInput() {
                let productSelects = JSON.parse(document.querySelector('.bundle-hidden-input').value);

                allSelects.forEach(select => {
                if (!select.closest('variant-infinite-select-options')) {
                    const dataKey = select.getAttribute('data-key');
                    const selectedOption = select.options[select.selectedIndex];
                    const selectedId = selectedOption.value.replace('gid://shopify/ProductVariant/', '');

                    const index = productSelects.findIndex(item => item.data === dataKey);
                    if (index !== -1) {
                    productSelects[index].id = selectedId;
                    }
                }
                });

                const hiddenInputs = document.querySelectorAll('.bundle-hidden-input');
                hiddenInputs.forEach(input => {
                input.value = JSON.stringify(productSelects);
                });
                }
                allSelects.forEach(select => {
                    if (!select.closest('variant-infinite-select-options')) {
                    select.addEventListener('change', updateHiddenInput);
                    }
                });
                const variantSelectOptions = bundlerAppProducts.querySelector('variant-infinite-select-options');
                if (variantSelectOptions) {
                    const productHandle = variantSelectOptions.dataset.handle;
                    const dataKey = variantSelectOptions.dataset.key;
                    const variantSelects = variantSelectOptions.querySelectorAll('select');

                    fetch(`/products/${productHandle}.js`)
                    .then(response => response.json())
                    .then(productData => {
                        function updateVariantId() {
                        const selectedOptions = Array.from(variantSelects, select => select.value);
                        const selectedVariant = productData.variants.find(variant => 
                            variant.options.every((option, index) => option === selectedOptions[index])
                        );

                        if (selectedVariant) {
                            let productSelects = JSON.parse(document.querySelector('.bundle-hidden-input').value);
                            
                            const index = productSelects.findIndex(item => item.data === dataKey);
                            if (index !== -1) {
                            productSelects[index].id = selectedVariant.id.toString();
                            }

                            const hiddenInputs = document.querySelectorAll('.bundle-hidden-input');
                            hiddenInputs.forEach(input => {
                            input.value = JSON.stringify(productSelects);
                            });
                        }
                        }

                        variantSelects.forEach(select => {
                        select.addEventListener('change', updateVariantId);
                        });
                        updateVariantId();
                    });
                }
                updateHiddenInput();    
                                })
                                .catch(error => {
                                console.error("Error processing product selects:", error);
                                });
}
            })
})
  }                  

document.addEventListener("DOMContentLoaded", (event) => {
    OptionsBundle();
});
</script>

{% schema %}
    {
      "name": "Bundle Info",
      "target": "body",
      "templates": ["product"],
      "settings": []
    }
{% endschema %}