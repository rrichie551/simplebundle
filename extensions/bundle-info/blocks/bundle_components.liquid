<body>
 <div id="bundlerAppProducts" class="{% if block.settings.layout %} verticalLay {% endif %}{% case block.settings.vertical_alignment %}{% when '4' %}{% when '3' %}threeGrid{% when '2' %}twoGrid{% endcase %}">
 </div>
</body>

{% style %}
  #bundlerAppProducts h3{
    text-align: center;
    text-transform: capitalize;
    color: {{ block.settings.colourH }};
    {% case block.settings.headingSize %}
    {% when 'small' %}
      font-size: 18px;
    {% when 'medium' %}
      font-size: 36px;
    {% when 'large' %}
      font-size: 54px;
    {% endcase %}
  }
  variant-selector-bundle{
    display:flex;
    flex-direction: column;
    gap:25px;
  }
  .bundle-part form{
    width:100%;
  }
  .bundle-part form label{
    font-size:0.8em;
    margin-bottom:15px;
    display:block;
  }
  .bundle-part form button{
    margin-top:20px;
  }
  #bundlerAppProducts{
    padding: 0px 30px;
  }
  #bundlerAppProducts .bundle-part img{
    height: 100%;
    width: 100%;
    object-fit: cover;
  }
  #bundlerAppProducts .bundle-part svg{
    height: 200px;
    width: 200px;
    background-color: beige;
  }
  #bundlerAppProducts .bundle-part{
    padding-top: 30px;
    width:100%;
    max-width:450px;
    margin:0 auto;
  }
  #bundlerAppProducts .bundle-parts .bundle-part:not(:last-child),  #bundlerAppProducts .bundle-parts .bundle-part:not(:nth-child(4n)){
    position: relative;
  }
  #bundlerAppProducts .bundle-parts .bundle-part:nth-child(4n){
    position: static;
  }
  #bundlerAppProducts .bundle-parts .bundle-part:not(:last-child)::after{
    content: '';
    position: absolute;
    right: -30px;
    top: 0;
    bottom: 0;
    height: 30px;
    width: 30px;
    margin: auto;
    background-image: url('https://cdn.shopify.com/s/files/1/0595/4833/6226/files/icons8-plus.svg?v=1723186535');
    background-repeat: no-repeat;
    background-size: contain;
  }
  #bundlerAppProducts .bundle-parts .bundle-part{
    padding-top: 0px;
    width: 22%;
  }
  #bundlerAppProducts.threeGrid .bundle-parts .bundle-part{
    width:30%;
  }
  #bundlerAppProducts.threeGrid .bundle-parts .bundle-part:not(:last-child),  #bundlerAppProducts .bundle-parts .bundle-part:not(:nth-child(3n)){
    position: relative;
  }
  #bundlerAppProducts.threeGrid .bundle-parts .bundle-part:nth-child(3n){
    position: static;
  }
  #bundlerAppProducts.threeGrid .bundle-parts .bundle-part:nth-child(3n)::after{
    display: none;
  }
  #bundlerAppProducts.twoGrid .bundle-parts .bundle-part{
    width:45%;
  }
  #bundlerAppProducts.verticalLay .bundle-parts .bundle-part{
    width:100%;
    max-width:450px;
  }
  #bundlerAppProducts.twoGrid .bundle-parts .bundle-part:not(:last-child),  #bundlerAppProducts .bundle-parts .bundle-part:not(:nth-child(2n)){
    position: relative;
  }
  #bundlerAppProducts.twoGrid .bundle-parts .bundle-part:nth-child(2n){
    position: static;
  }
  #bundlerAppProducts.twoGrid .bundle-parts .bundle-part:nth-child(2n)::after{
    display: none;
  }
  .bundle-parts{
    display: flex;
    padding-top: 30px;
    align-items: stretch;
    justify-content: center;
    gap: 30px;
    flex-wrap: wrap;
  }
  #bundlerAppProducts.verticalLay .bundle-parts{
    flex-direction: column;
    align-items: center;
    gap:50px;
  }
  #bundlerAppProducts.verticalLay .bundle-parts .bundle-part:not(:last-child)::after{
      bottom: -35px;
      left: 0;
      right: 0;
      margin: 0 auto;
      top:auto;
    }
  #bundlerAppProducts .bundle-parts .bundle-part img{
    height: 100%;
    width: 100%;
    object-fit: cover;
  }
  #bundlerAppProducts .bundle-part, #bundlerAppProducts .bundle-part span.bundle-title{
    text-align: left;
    font-weight: 700;
    text-transform: capitalize;
    display: flex;
    justify-content: center;
    color: black;
    font-size: 1.1em;
    line-height: 16px;
    flex-direction: column;
  }
  #bundlerAppProducts .bundle-part span.bundle-title{
    max-width: 20ch;
    line-height: 120%;
    color: {{ block.settings.colourT }};
  }
  #bundlerAppProducts .bundle-part span.bundle-price{
      font-size: 0.9em;
      color: black;
      font-weight: 300;
      color: {{ block.settings.colourP }};
  }
  .bundle-title-price{
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 10px;
    padding-top: 20px;
    width: 100%;
  }
  #bundlerAppProducts .bundle-part a{
    text-decoration: none;
    display:flex;
    flex-direction: column;
  }
  .bundleProducts{
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-top:20px;
    margin-left:20px;
  }
  .bundleProducts .bundleProduct{
    display: flex;
    align-items: center;
    gap: 10px;
  }
  .bundleProducts .bundleProduct img.bundleProductImage {
    width: 50px !important;
    height: 50px !important;
  }
  .bundleProducts .bundleProduct .bundle-product-details a{
    display: flex !important;
    flex-direction: row !important;
    align-items: center;
    gap:5px;
  }
  .bundleProducts .bundleProduct .bundle-product-details a span{
    color:black;
    font-size:0.6em;
  }
  .bundleProducts .bundleProduct .bundle-product-details a span:nth-child(2){
    font-size:0.4em;
  }
  .bundleItems{
    display: flex;
    align-items: center;
    gap:5px;
    color:#666;
    font-size:1.2rem;
    margin-top:20px;
    cursor:pointer;
  }
  .bundleItems svg path{
    fill:#666;
  }
  .bundleItems svg{
    background-color:transparent !important;
    height:10px !important;
    width:10px !important;
    --webkit-transition: all .4s;
    transition: all .4s;
  }
  .bundleItems.active svg{
    transform:rotate(180deg);
  }
  .bundleProductsGrid{
    --webkit-transition: all .4s;
    display: grid;
    grid-template-rows: 0fr;
    opacity: 0;
    transition: all .4s;
  }
  .bundleProductsGrid.active{
    opacity:1;
    grid-template-rows: 1fr;
  }
  .bundleProductsGrid > div{
    overflow:hidden;
  }
  .bundle-infinite-div{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .bundle-infinite-div select{
    box-sizing: border-box;
    width: 100%;
    padding: 8px;
    font-size: 16px;
    border-radius: 0px;
    border: 1px solid #333;
    margin-bottom: 8px;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url('https://cdn.shopify.com/s/files/1/0641/6033/3877/files/drop.svg?v=1725863438');
    background-repeat: no-repeat;
    background-position: right 8px center;
    font-family: inherit;
    font-weight: normal;
    color: #000;
  }
  #bundlerAppProducts .bundle-infinite-div:not(:last-child){
   margin-bottom: 10px;
  }
  .bundle-infinite-div label{
    margin-bottom: 5px;
  }
  @media only screen and (max-width:991px){
    #bundlerAppProducts .bundle-parts .bundle-part{
      width: 47.2%;
    }
    #bundlerAppProducts.threeGrid .bundle-parts .bundle-part{
      width: 47.2%;
    }
    #bundlerAppProducts.twoGrid .bundle-parts .bundle-part{
      width: 47.2%;
    }
    #bundlerAppProducts .bundle-parts .bundle-part:nth-child(2n){
    position: static;
    }
  }
  @media only screen and (max-width:767px){
    #bundlerAppProducts .bundle-parts .bundle-part:nth-child(2n){
    position: relative;
  }
  #bundlerAppProducts .bundle-parts .bundle-part:nth-child(4n){
    position: relative;
  }
    #bundlerAppProducts .bundle-parts .bundle-part{
      width: 100%;
    }
    #bundlerAppProducts .bundle-parts .bundle-part:not(:last-child)::after{
      bottom: -50px;
      left: 0;
      right: 0;
      margin: 0 auto;
      top:auto;
    }
    .bundle-parts{
      gap: 50px;
    }
  }
{% endstyle %}

<script>
  var curr = {{ shop.currency | json }};
  var formatF = {{ shop.money_format | json }};

  function formatMoney(cents, format) {
  if (typeof cents === 'string') cents = cents.replace('.', '');
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = format || formatF;

  function defaultOption(opt, def) {
    return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
}

  function testProxy() {
    const base = '{{ shop.url }}'
      const baseUrl = `${base}/apps/proxyTest`
        fetch(baseUrl,{
          method:'GET',
          redirect: 'manual',
          headers:{
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
          }
          }).then(res => res.json()).then(x =>{
            const result = x.message.bundles;
            console.log("This is the result", result);
            result.forEach(bundle => {
        // Extract the product ID from the bundle ProductBundleId
        const bundleProductId = bundle.ProductBundleId.replace('gid://shopify/Product/', '');
        console.log("This is the bundle product id", bundleProductId);

        // Check if the current product is the bundle product
        if ('{{ product.id }}' === bundleProductId) {
          console.log("This is the bundle");
            const products = bundle.products;
         
                let bundleProductElement = `
                  <h3>{{ block.settings.headingB }}</h3>
                  <div class="bundle-parts">
                `;

                // Use Promise.all to wait for all fetch calls to complete
                Promise.all(products.map(product => 
                  fetch(window.Shopify.routes.root + `products/${product.handle}.js`)
                    .then(response => response.json())
                    .then(prod => {
                      var price = formatMoney(prod.price, formatF);
                      console.log("This is the prod", prod);
                      return `
                        <div class="bundle-part">
                            <a target="_blank" href="{{ shop.url }}${prod.url}">
                            <img src="${product.images[0].originalSrc}" alt="${product.title}">
                            <div class="bundle-title-price">
                              <span class="bundle-title">${product.title}</span>
                              <span class="bundle-price">${price}</span>
                            </div>
                            </a>
                        </div>
                      `;
                    })
                    )).then(productElements => {
                  bundleProductElement += productElements.join('');
                  bundleProductElement += `
                    </div>
                  `;

                  // Inject the HTML structure
                  document.getElementById('bundlerAppProducts').innerHTML = bundleProductElement;
                }).catch(error => {
                  console.error('Error fetching product data:', error);
                });
        
  }  else {
          // Check if the current product is part of the bundle
          const products = bundle.products;
          products.forEach(product =>{
            if ('{{ product.id  }}' === product.id.replace('gid://shopify/Product/', '')) {
                 const productsBundle = bundle.products;
              fetch(window.Shopify.routes.root + `products/${bundle.ProductHandle}.js`)
            .then(response => response.json())
            .then(prod => {
              function renderProductOptions(product) {
                    return product.options.map((option, index) => `
                                  <div class="product-option-bundle">
                                                <label for="Option-{{ section.id }}-${index}}">${option.name}</label>

                                                <div class="my-2">
                                                    <select 
                                                        name="options[${option.name}]" 
                                                        id="Option-{{ section.id }}-${index}}" 
                                                        class="w-full border py-3 px-3"
                                                    >
                                                        ${option.values.map((value, index) => `
                                                            <option 
                                                                value="${value}"
                                                               ${index === 0 ? 'selected="selected"' : ''}
                                                            >
                                                                ${value}
                                                            </option>
                                                       `)}
                                                    </select>
                                                </div>
                                                </div>
                                    
                    `).join('');
                  }
              var image;
              if(!prod.featured_image){
                  image = `{{ 'product-1' | placeholder_svg_tag }}`
              }
              else{
                  image = `<img src="${prod.featured_image}" alt="${bundle.bundleName}">`
              }
              console.log(prod);
              var price = formatMoney(prod.variants[0].price, formatF);
              const bundleProductElement = `
            <h3>{{ block.settings.headingC }}</h3>
            <div class="bundle-part">
                ${image}
                <div class="bundle-title-price">
                <a href="{{ shop.url }}/products/${bundle.ProductHandle}">
                <span class="bundle-title">${bundle.bundleName}</span>
                 </a>
                <span id="priceBundle-{{ section.id }}" class="bundle-price">${price}</span>
                </div>
                <div class="bundleItems">Bundle Components <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14 14" focusable="false" aria-hidden="true" class="a8x1wu10 _1fragem2i _1fragemsd _1fragemog _1fragemo6 _1fragemri"><path stroke-linecap="round" stroke-linejoin="round" d="m2.1 8.4 4.653-4.653a.35.35 0 0 1 .495 0L11.9 8.4"></path></svg></div>
                <div class="bundleProductsGrid">
                  <div>
                    <div class="bundleProducts">
                      ${productsBundle.map(compo => `
                          <div class="bundleProduct">
                              <img src="${compo.images[0].originalSrc}" alt="${compo.images[0].altText}" class="bundleProductImage">
                              <div class="bundle-product-details">
                                  <a href="{{ shop.url }}/products/${compo.handle}">
                                      <span class="bundleProductQuan">${compo.quantity}</span>
                                      <span>x</span>
                                  <span class="bundleProductTitle">${compo.title}</span>
                                  </a>
                              </div>
                          </div>
                      `).join('')}
                    </div>
                  </div>
                </div>
              <form method="post" action="/cart/add" id="addToCartForm-${prod.id}" class="product-form" >
                 <input type="hidden" name="id" value="${prod.variants[0].id}">
                <variant-selector-bundle data-url="${prod.url}" data-section="{{ section.id }}">
                ${renderProductOptions(prod)}
                <button type="submit" class="shopify-payment-button__button shopify-payment-button__button--unbranded">Add to Cart</button>
                </variant-selector-bundle>
              </form>
            </div>
          `;

          document.getElementById('bundlerAppProducts').innerHTML = bundleProductElement;

          return prod;

            }).then(prod => 
              {
                function variantSelectorChangeHandler(event) {
            const element = event.currentTarget;
            const sectionId = element.dataset.section;

            function getSelectedOptions() {
                const options = Array.from(element.querySelectorAll('select'), (select) => select.value);
                return options;
            }

            function getVariantJSON() {
                const variantData = prod.variants || [];
                return variantData;
            }

            function getSelectedVariant(options) {
                const variant = getVariantJSON().find((variant) => {
                    const findings = !variant.options.map((option, index) => {
                        return options[index] === option;
                    }).includes(false);

                    if (findings) return variant;
                });

                console.log(variant);
                return variant;
            }

            function updateFormID(currentVariant) {
                const formInput = document.getElementById(`addToCartForm-${prod.id}`).querySelector('input[name="id"]');
                formInput.value = currentVariant.id;
            }

              function updatePrice(currentVariant) {
                          const id = `priceBundle-${sectionId}`;
                          const oldPrice = document.getElementById(id);
                          oldPrice.innerHTML = formatMoney(currentVariant.price, formatF);
                     
              }

                // Execution flow
                const selectedOptions = getSelectedOptions();
                const selectedVariant = getSelectedVariant(selectedOptions);

                if (selectedVariant) {
                    updateFormID(selectedVariant);
                    updatePrice(selectedVariant);
                }
            }

            // Attach the event listener to the appropriate element
            document.querySelectorAll('variant-selector-bundle').forEach((element) => {
                element.addEventListener('change', variantSelectorChangeHandler);
            });
            document.querySelector('.bundleItems').addEventListener('click', ()=>{
              document.querySelector('.bundleItems').classList.toggle('active');
              document.querySelector('.bundleProductsGrid').classList.toggle('active');
            })
              }
            )
          }
          })
          
        }
      });
          } );
}

document.addEventListener("DOMContentLoaded", (event) => {
  testProxy();
});
</script>

{% if block.settings.custom_css != blank %}
  <style type="text/css">
      {{ block.settings.custom_css }}
  </style>
  {% endif %}

  <!-- Render Custom JavaScript -->
  {% if block.settings.custom_js != blank %}
  <script type="text/javascript">
      {{ block.settings.custom_js }}
  </script>
  {% endif %}
{% schema %}
{
  "name": "Bundle Info",
  "target": "section",
  "settings": [
    {
      "type":"text",
      "id": "headingB",
      "label":"Heading For Bundle Product",
      "default":"This bundle is made of these products"
    },
    {
      "type":"text",
      "id": "headingC",
      "label":"Heading For Single Product",
      "default":"This product is a part of bundle"
    },
    { 
      "type": "color",
      "id": "colourH",
      "label": "Heading Colour",
      "default": "#111111" 
    },
    { 
      "type": "color",
      "id": "colourT",
      "label": "Product Title Colour",
      "default": "#111111" 
    },
    { 
      "type": "color",
      "id": "colourP",
      "label": "Product Price Colour",
      "default": "#111111" 
    },
    {
      "type": "select",
      "id": "headingSize",
      "label": "Heading Size",
      "options": [
        {
          "value": "small",
          "label": "Small"
        },
        {
          "value": "medium",
          "label": "Medium"
        },
        {
          "value": "large",
          "label": "Large"
        }
      ],
      "default": "small"
    },
    {
      "type":"checkbox",
      "id":"layout",
      "label":"Vertical Layout",
      "default":false
    },  
    {
      "type": "select",
      "id": "vertical_alignment",
      "label": "Desktop Grid Per Row",
      "options": [
        {
          "value": "4",
          "label": "4"
        },
        {
          "value": "3",
          "label": "3"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "4"
    },
    {
      "type": "textarea",
      "id": "custom_css",
      "label": "Custom CSS",
      "info": "Add your custom CSS here."
    },
    {
      "type": "textarea",
      "id": "custom_js",
      "label": "Custom JavaScript",
      "info": "Add your custom JavaScript here."
    }
  ]
}
{% endschema %}

